#!/bin/sh

APP=chromium

mkdir tmp;
cd tmp;

# DOWNLOADING THE DEPENDENCIES
if test -f ./appimagetool; then
	echo " appimagetool already exists" 1> /dev/null
else
	echo " Downloading appimagetool..."
	wget -q "$(wget -q https://api.github.com/repos/probonopd/go-appimage/releases -O - | sed 's/"/ /g; s/ /\n/g' | grep -o 'https.*continuous.*tool.*86_64.*mage$')" -O appimagetool
fi
if test -f ./pkg2appimage; then
	echo " pkg2appimage already exists" 1> /dev/null
else
	echo " Downloading pkg2appimage..."
	wget -q https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main/tools/pkg2appimage
fi
chmod a+x ./appimagetool ./pkg2appimage
rm -f ./recipe.yml

DEBRELEASE="stable"

# CREATING THE APPIMAGE'S RECIPE...
echo "app: chromium
binpatch: true

ingredients:
  dist: $DEBRELEASE
  package: chromium
  sources:
    - deb http://archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
    - deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
    - deb http://archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
    - deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse

  packages:
    - chromium" >> recipe.yml

mkdir -p ./$APP/$APP.AppDir
cd ./$APP

# ...DOWNLOAD THE DEB PACKAGES...
# Choose a source manually

_chromium_from_debian() {
	# Debian oldstable-security, this may bee not in sync with the upstream
	# wget https://snapshot.debian.org/archive/debian/20210111T084914Z/pool/main/c/chromium/chromium_87.0.4280.141-0.1_amd64.deb
	wget http://security.ubuntu.com/ubuntu/pool/universe/c/chromium-browser/chromium-browser_80.0.3987.163-0ubuntu1_amd64.deb
}

_chromium_from_linux_mint() {
	wget http://packages.linuxmint.com/pool/upstream/c/chromium/$(curl -Ls http://packages.linuxmint.com/pool/upstream/c/chromium/ | grep -Po '(?<=href=")[^"]*' | grep "chromium_" | grep "amd64.deb" | tail -3 | head -1)
}

if ! test -f ./chromium_*.deb; then

	_chromium_from_debian #uncomment to use packages from Debian repos
	#_chromium_from_linux_mint #uncomment to use packages from Linux Mint repos

fi
VERSION=$(ls . | sort | grep -o -P '(?<=chromium_).*(?=_amd64)' | head -1)

# ...BUILD THE APPIMAGE...
cd ..
./pkg2appimage ./recipe.yml

# COMPILE SCHEMAS
glib-compile-schemas ./$APP/$APP.AppDir/usr/share/glib-2.0/schemas/ || echo "No ./usr/share/glib-2.0/schemas/"

# ...REPLACING THE EXISTING APPRUN WITH A CUSTOM ONE...
rm -R -f ./$APP/$APP.AppDir/AppRun
cat >> ./$APP/$APP.AppDir/AppRun << 'EOF'
#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export UNION_PRELOAD="${HERE}"
export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${PATH}"
export LD_LIBRARY_PATH=/lib/:/lib64/:/lib/x86_64-linux-gnu/:/usr/lib/:"${HERE}"/usr/lib/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${LD_LIBRARY_PATH}"
export PYTHONPATH="${HERE}"/usr/share/pyshared/:"${HERE}"/usr/lib/python*/:"${PYTHONPATH}"
export PYTHONHOME="${HERE}"/usr/:"${HERE}"/usr/lib/python*/
export XDG_DATA_DIRS="${HERE}"/usr/share/:"${XDG_DATA_DIRS}"
exec ${HERE}/usr/lib/chromium/chromium "$@"
EOF
chmod a+x ./$APP/$APP.AppDir/AppRun

# IMPORT THE LAUNCHER
if test -f ./$APP/$APP.AppDir/*.desktop; then
	echo "The desktop file exists"
else
	echo "Trying to get the .desktop file"
	cp ./$APP/$APP.AppDir/usr/share/applications/$APP*.desktop ./$APP/$APP.AppDir/ 2>/dev/null
fi

# ...EXPORT THE APPDIR TO AN APPIMAGE!
ARCH=x86_64 VERSION=$(./appimagetool -v | grep -o '[[:digit:]]*') ./appimagetool -s ./$APP/$APP.AppDir
cd ..
mv ./tmp/*.AppImage ./Chromium_Web_Browser-$VERSION-x86_64.AppImage
